{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "10602523904429381366"
    }
  },
  "parameters": {
    "webAppName": {
      "type": "string",
      "defaultValue": "[format('webApp-{0}', uniqueString(resourceGroup().id))]",
      "minLength": 2,
      "metadata": {
        "description": "Web app name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "B1",
      "metadata": {
        "description": "The SKU of App Service Plan."
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "metadata": {
        "description": "The Runtime stack of current web app"
      }
    },
    "appServicePlanName": {
        "type": "string",
        "defaultValue": "[format('AppServicePlan-{0}', parameters('webAppName'))]",
        "metadata": {
          "description": "App service plan name"
      }
    },
      "DT_API_TOKEN": {
        "type": "secureString",
        "metadata": {
          "description": "Dynatrace API Token"
        }
      },
      "DT_ENDPOINT": {
        "type": "secureString",
        "metadata": {
          "description": "Dynatrace Endpoint URL"
        }
      },
      "DT_INCLUDE": {
        "type": "string",
        "allowedValues": ["all", "java", "apache", "nginx", "nodejs", "dotnet", "php", "go", "sdk"],
        "metadata": {
          "description": "Dynatrace Include Option"
        }
      },
    //   "START_APP_CMD": {
    //     "type": "string",
    //     // default values for START_APP_CMD should always work - if you want to change it, you're on your own ;)
    //     "defaultValue": "[variables('startupCommand')]",
    //       "metadata": {
    //         "description": "Startup Command for the App"
    //   }
    // },
    "PYTHON_WEB_RUNTIME": {
      "type": "string",
      "defaultValue": "N/A",
      "allowedValues": ["flask", "django", "N/A"]
    }
  },
  "variables": {
    "runtimeToStartupCommand": {
        "node": "npm start",
        "dotnetcore": "dotnet dotnet-sample.dll",
        "php": "php -S localhost:8080",
        "java": "java -jar /home/site/wwwroot/app.jar --server.port=80",
        "python": {
          "django": "gunicorn --bind=0.0.0.0 --timeout 600 --workers=4 --chdir quickstartproject quickstartproject.wsgi",
          "flask": "gunicorn --bind=0.0.0.0 --timeout 600 app:app"
        }


  },
    "runtimeNoVersion": "[runtime.justRuntime(parameters('linuxFxVersion'))]",
    "runtimeIsPython": "[equals(variables('runtimeNoVersion'), 'python')]",
    // assigning startupCommand differs if the runtime was python
    "startupCommand": "[if(variables('runtimeIsPython'),
                        variables('runtimeToStartupCommand')[variables('runtimeNoVersion')][parameters('PYTHON_WEB_RUNTIME')],
                        variables('runtimeToStartupCommand')[variables('runtimeNoVersion')])]",

    // needed only for Python zip deployments
    "SCM_DO_BUILD_DURING_DEPLOYMENT": "[string(variables('runtimeIsPython'))]",

    "installerWrapper": {
      "installationPath": "/tmp/installer-wrapper.sh",
      "URL": "https://mjarzemb.blob.core.windows.net/mjarzemb-public/oneagent_installer.sh",
      "runCommand": "sh /tmp/installer-wrapper.sh"
    },
    // this downloads and runs the installer wrapper script inside which thesh /tmp START_APP_CMD is used to run the actual application proccess
    "appCommandLine": "[concat('wget -O ', variables('installerWrapper').installationPath, ' ', variables('installerWrapper').URL, ' && ', variables('installerWrapper').runCommand)]"
    // "appCommandLine": "[concat(variables('installAndRunDT'), ' && ', variables('startupCommand'))]"


  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "appCommandLine": "[variables('appCommandLine')]",
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
      ],
      "resources": [
        {
          "type": "config",
          "apiVersion": "2022-03-01",
          "name": "appsettings",
          "dependsOn": [
              "[resourceId('Microsoft.Web/sites/', parameters('webAppName'))]"
          ],

          "properties": {
            "DT_API_TOKEN": "[parameters('DT_API_TOKEN')]",
            "DT_ENDPOINT": "[parameters('DT_ENDPOINT')]",
            "DT_INCLUDE": "[parameters('DT_INCLUDE')]",
            // "START_APP_CMD": "[parameters('START_APP_CMD')]",
            "START_APP_CMD": "[variables('startupCommand')]",
            "SCM_DO_BUILD_DURING_DEPLOYMENT": "[variables('SCM_DO_BUILD_DURING_DEPLOYMENT')]"
          }
      }
      ]
     }
  ],
    "outputs": {
        "appServiceEndpoint": {
            "type": "string",
            "value": "[concat('https://', reference(parameters('webAppName')).defaultHostName)]"
        }
      },
      "functions": [{
"namespace": "runtime",
    "members": {
            "justRuntime": {
                "parameters": [
                {
                    "name": "linuxFxVersion",
                    "type": "string"
                }
                ],
                "output": {
                    "type": "string",
                    "value": "[tolower(split(parameters('linuxFxVersion'), '|')[0])]"
                }
            }
            }
      }]
}
